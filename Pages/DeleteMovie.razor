@using MoviesApp.Data
@using MoviesApp.Models

@inject MoviesRepository Repository
@inject NavigationManager NavigationManager

<div class="modal fade" id="@GetModalId(Movie)" tabindex="-1" aria-labelledby="exampleBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleBackdropLabel">Delete Movie: @Movie.Title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete movie <strong>@Movie.Title</strong> ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => ConfirmDeleteAsync()">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Movie? Movie { get; set; }

    public static string GetModalId(Movie? movie){
        ArgumentNullException.ThrowIfNull(movie);
        return $"deleteModal-{movie?.Id}";
    }

    private async Task ConfirmDeleteAsync()
    {
        ArgumentNullException.ThrowIfNull(Movie);
        await Repository.DeleteMovieAsync(Movie.Id);
        NavigationManager.NavigateTo("/", true); // forces page reload when going back to a redirected url so that the ucrrent changes are reflected
    } 

}